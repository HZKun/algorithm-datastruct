package vip.qmwk.leetcode.hot100;

/**
 * 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种
 * <p>
 * 输入: 3
 * 输出: 5
 * 解释:
 * 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
 * <p>
 * 1         3     3      2      1
 * \       /     /      / \      \
 * 3     2     1      1   3      2
 * /     /       \                 \
 * 2     1         2                 3
 */
public class Test_96 {

    /**
     * 题目要求是计算不同二叉搜索树的个数。为此，我们可以定义两个函数：
     * G(n): 长度为 n 的序列能构成的不同二叉搜索树的个数。
     * F(i,n): 以 i 为根、序列长度为 n 的不同二叉搜索树个数 (1≤i≤n)。
     * G(n) = F(1,n) + F(2,n) + ... + F(i,n) + F(i+1,n) + ... + F(n,n)
     * F(i,n) = 左子树数量 * 右子树数量
     * = G(i-1) * G(n-i)
     * 则G(n)=G(0)∗G(n−1)+G(1)∗(n−2)+...+G(n−1)∗G(0)
     *
     * @param n
     * @return
     */
    public int numTrees(int n) {
        // 定义G(i)为长度为i的二叉树可能性
        int[] G = new int[n + 1];

        // 初始化
        G[0] = 1;
        G[1] = 1;
        for (int i = 2; i <= n; ++i) {
            for (int j = 0; j <= i - 1; ++j) {
                // 根节点用掉一个数，剩下i-1个，dp[j]用掉j个，只剩下i-j-1个，因此是dp[i-j-1]
                G[i] += G[j] * G[i - j - 1];
            }
        }
        return G[n];
    }
}
